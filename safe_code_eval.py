# Copyright 2024 The HuggingFace Datasets Authors and the current dataset script contributor.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""A little safer variant of the Code Eval"""

import os
import subprocess
import tempfile
from collections import defaultdict
from pathlib import Path

import datasets
import evaluate
import numpy as np

_CITATION = """\
@InProceedings{huggingface:module,
title = {Safe Code Eval},
authors={Takuya Kato},
year={2024}
}
"""

_DESCRIPTION = """\
This module aims to be a safer replacement of the Code Eval metric.
`pyodide` converts Python scripts generated by LLMs to javascript, and
`deno` runs the javascript while ensuring the runtime security.
"""


_KWARGS_DESCRIPTION = """\
Calculates how good are predictions given some references, using certain scores
Args:
    predictions: list of candidates to evaluate. Each candidates should be a list
        of strings with several code candidates to solve the problem.
    references: a list with a test for each predictions. Each test should evaluate
        correctness of a code candidate.
    k: number of code candidates to consider in the evaluation (Default: [1, 10, 100])
    timeout: time limit for each candidate in seconds
Returns:
    pass_at_k: dict with pass rates for each k
    results: dict with granular results of each unittest
Examples:
    >>> safe_code_eval = evaluate.load("ktakuya/safe_code_eval")
    >>> test_cases = ["assert add(2, 3) == 5"]
    >>> candidates = [["def add(a,b): return a*b", "def add(a, b): return a+b"]]
    >>> pass_at_k, results = safe_code_eval.compute(references=test_cases, predictions=candidates, k=[1, 2])
    >>> print(pass_at_k)
    {'pass@1': 0.5, 'pass@2': 1.0}
"""

MAIN_TS = """\
import pyodideModule from 'npm:pyodide/pyodide.js';
const pyodide = await pyodideModule.loadPyodide();
const code = await Deno.readTextFile('{path_py}');
const result = await pyodide.runPythonAsync(code);
console.log(result);
"""


@evaluate.utils.file_utils.add_start_docstrings(_DESCRIPTION, _KWARGS_DESCRIPTION)
class SafeCodeEval(evaluate.Metric):
    """"""

    def _info(self):
        return evaluate.MetricInfo(
            module_type="metric",
            description=_DESCRIPTION,
            citation=_CITATION,
            inputs_description=_KWARGS_DESCRIPTION,
            features=datasets.Features(
                {
                    "predictions": datasets.Sequence(datasets.Value("string")),
                    "references": datasets.Value("string"),
                }
            ),
            homepage="https://huggingface.co/ktakuya",
            codebase_urls=["http://github.com/Ktakuya332C/safer-code-eval"],
            reference_urls=["http://github.com/Ktakuya332C/safer-code-eval"],
        )

    def _compute(self, predictions, references, k=[1, 10, 100], timeout=10.0):
        """Returns the scores"""

        # Runs the code
        results = defaultdict(list)
        for task_id, (candidates, test_case) in enumerate(zip(predictions, references)):
            for completion_id, candidate in enumerate(candidates):
                test_program = "\n".join([candidate, test_case])
                result = _execute(test_program, timeout)
                result |= {"task_id": task_id, "completion_id": completion_id}
                results[task_id].append((completion_id, result))

        # Calcualte metrics
        total, correct = [], []
        for result in results.values():
            passed = [r[1]["passed"] for r in result]
            total.append(len(passed))
            correct.append(sum(passed))
        total = np.array(total)
        correct = np.array(correct)

        ks = k
        pass_at_k = {
            f"pass@{k}": estimate_pass_at_k(total, correct, k).mean()
            for k in ks
            if (total >= k).all()
        }
        return pass_at_k, results


def estimate_pass_at_k(num_samples, num_correct, k):
    """Copied from the Code Eval"""

    def estimator(n: int, c: int, k: int) -> float:
        """Calculates 1 - comb(n - c, k) / comb(n, k)."""
        if n - c < k:
            return 1.0
        return 1.0 - np.prod(1.0 - k / np.arange(n - c + 1, n + 1))

    if isinstance(num_samples, int):
        num_samples_it = itertools.repeat(num_samples, len(num_correct))
    else:
        assert len(num_samples) == len(num_correct)
        num_samples_it = iter(num_samples)

    return np.array(
        [estimator(int(n), int(c), k) for n, c in zip(num_samples_it, num_correct)]
    )


def _execute(code, timeout):
    with tempfile.TemporaryDirectory() as tmpdir:
        result = _execute_internal(Path(tmpdir), code, timeout)
    return result


def _execute_internal(tmpdir, code, timeout):
    path_py = tmpdir / "main.py"
    path_ts = tmpdir / "main.ts"
    with path_py.open("w") as fout:
        fout.write(code)
    with path_ts.open("w") as fout:
        fout.write(MAIN_TS.format(path_py=path_py))
    try:
        proc = subprocess.run(
            args=["deno", "run", "--allow-read", path_ts],
            capture_output=True,
            timeout=timeout,
            env=os.environ | {"NO_COLOR": "1"},
        )
    except subprocess.TimeoutExpired as e:
        return {
            "passed": False,
            "result": str(e),
            "exitcode": None,
            "stdout": "",
            "stderr": "",
        }
    stderr = proc.stderr.decode("utf-8").rstrip("\n")
    stdout = proc.stdout.decode("utf-8").rstrip("\n")
    return {
        # Required to match the Code Eval I/F
        "passed": proc.returncode == 0,
        "result": stderr,
        # Auxiliary infomation
        "exitcode": proc.returncode,
        "stdout": stdout,
        "stderr": stderr,
    }
